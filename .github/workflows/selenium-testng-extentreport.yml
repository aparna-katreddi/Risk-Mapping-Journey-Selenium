name: Selenium Tests
permissions:
  contents: write

on:
  # Trigger workflow manually via GitHub UI
  workflow_dispatch:
    inputs:
      browser:
        description: 'Select the browser'
        required: true
        type: choice
        options:
          - 'chrome'
          - 'firefox'
        default: 'chrome'

      env:
        description: 'Select the environment'
        required: true
        type: choice
        options:
          - 'qa'
          - 'stage'
          - 'prod'
        default: 'qa'

      groups:
        description: 'Select the test group'
        required: true
        type: choice
        options:
          - 'smoke'
          - 'regression'
        default: 'regression'
      suite:
        description: 'Select the TestNG suite'
        required: true
        type: choice
        options:
          - 'testng-sequence.xml'
          - 'testng.xml'
        default: 'testng-sequence.xml'


jobs:
  selenium-tests:
    runs-on: ubuntu-latest  # Can be 'windows-latest' or 'macos-latest' if needed

    steps:
      # Step 1: Checkout code
      - name: Checkout repository
        uses: actions/checkout@v3

      # Step 2: Set up Java (choose the version you need)
      - name: Set up JDK 23
        uses: actions/setup-java@v3
        with:
          java-version: '23'
          distribution: 'temurin'

      # Step 3: Cache Maven dependencies
      - name: Cache Maven dependencies
        uses: actions/cache@v4
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      # Step 5: Run tests with parameters passed by the user
      - name: Run Selenium tests
        run: mvn clean test -Dbrowser=${{ github.event.inputs.browser }} -Denv=${{ github.event.inputs.env }} -Dgroups=${{ github.event.inputs.groups }} -Dtestng.suite=src/test/resources/${{ github.event.inputs.suite }}
        env:
          CI: true

      # Step 6: Upload Test Results (optional)
      - name: Upload Test Results
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: /reports/

      # Step 7: upload to GitHub Pages 
      - name: Upload all reports to gh-pages and update index
        if: always()
        run: |
              git fetch
              git switch gh-pages || git checkout --orphan gh-pages
          
              mkdir -p reports
          
              # Keep all old reports
              cp -r reports/ temp-reports || true
          
              # Copy new reports
              cp /reports/*.html reports/
          
              # Generate index.html with all reports
              INDEX_FILE="reports/index.html"
              echo "<!DOCTYPE html><html><head><title>Test Reports</title></head><body>" > $INDEX_FILE
              echo "<h1>Selenium Test Reports</h1><ul>" >> $INDEX_FILE
          
              for file in $(ls reports/*.html | sort -r); do
                filename=$(basename "$file")
                echo "<li><a href=\"$filename\">$filename</a></li>" >> $INDEX_FILE
              done
          
              echo "</ul></body></html>" >> $INDEX_FILE
          
              git config user.name "github-actions"
              git config user.email "github-actions@github.com"
          
              git add reports
              git commit -m "Add test report and update index for run ${{ github.run_id }}" || echo "No changes to commit"
              git push origin gh-pages      


